#!/bin/bash

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

show_help() {
    cat << EOF
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./docker.sh [–∫–æ–º–∞–Ω–¥–∞]

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
  start       - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ MongoDB –≤ Docker
  stop        - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
  restart     - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
  logs        - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
  logs-bot    - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏ –±–æ—Ç–∞
  logs-mongo  - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏ MongoDB
  build       - –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑
  status      - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
  shell       - –í–æ–π—Ç–∏ –≤ shell –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –±–æ—Ç–∞
  mongo-shell - –í–æ–π—Ç–∏ –≤ MongoDB shell (mongosh)
  clean       - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –æ–±—Ä–∞–∑–∞–º–∏
  clean-db    - –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ)
  help        - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
EOF
}

start_bot() {
    echo -e "${GREEN}üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ MongoDB...${NC}"
    echo -e "${CYAN}‚ÑπÔ∏è  MongoDB –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –ø–æ—Ä—Ç—É 27017${NC}"
    docker compose up -d
    echo -e "${GREEN}‚úÖ –ë–æ—Ç –∏ MongoDB —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã!${NC}"
    echo -e "${CYAN}–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ./docker.sh logs${NC}"
}

stop_bot() {
    echo -e "${YELLOW}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –∏ MongoDB...${NC}"
    docker compose down
    echo -e "${GREEN}‚úÖ –ë–æ—Ç –∏ MongoDB –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!${NC}"
}

restart_bot() {
    echo -e "${YELLOW}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ MongoDB...${NC}"
    docker compose restart
    echo -e "${GREEN}‚úÖ –ë–æ—Ç –∏ MongoDB –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã!${NC}"
}

show_logs() {
    echo -e "${CYAN}üìã –õ–æ–≥–∏ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):${NC}"
    docker compose logs -f --tail=100
}

show_bot_logs() {
    echo -e "${CYAN}ü§ñ –õ–æ–≥–∏ –±–æ—Ç–∞ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):${NC}"
    docker compose logs -f --tail=100 yui-bot
}

show_mongo_logs() {
    echo -e "${CYAN}üçÉ –õ–æ–≥–∏ MongoDB (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):${NC}"
    docker compose logs -f --tail=100 mongodb
}

build_image() {
    echo -e "${YELLOW}üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞...${NC}"
    docker compose build --no-cache
    echo -e "${GREEN}‚úÖ –û–±—Ä–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω!${NC}"
    echo -e "${CYAN}–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ./docker.sh start${NC}"
}

show_status() {
    echo -e "${CYAN}üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:${NC}"
    docker compose ps
}

enter_shell() {
    echo -e "${CYAN}üíª –í—Ö–æ–¥ –≤ shell –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –±–æ—Ç–∞...${NC}"
    docker compose exec yui-bot sh
}

enter_mongo_shell() {
    echo -e "${CYAN}üçÉ –í—Ö–æ–¥ –≤ MongoDB shell...${NC}"
    echo -e "${YELLOW}–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã MongoDB. –î–ª—è –≤—ã—Ö–æ–¥–∞: exit${NC}"
    docker compose exec mongodb mongosh -u admin -p password --authenticationDatabase admin
}

clean_all() {
    echo -e "${YELLOW}üßπ –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –æ–±—Ä–∞–∑–æ–≤...${NC}"
    docker compose down -v
    docker rmi yui-yui-bot 2>/dev/null || true
    echo -e "${GREEN}‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
}

clean_database() {
    echo -e "${RED}‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!${NC}"
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ 'yes' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: " confirmation
    
    if [ "$confirmation" != "yes" ]; then
        echo -e "${YELLOW}‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞${NC}"
        return
    fi
    
    echo -e "${YELLOW}üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...${NC}"
    
    if ! docker compose ps | grep -q mongodb.*running; then
        echo -e "${RED}‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä MongoDB –Ω–µ –∑–∞–ø—É—â–µ–Ω!${NC}"
        echo -e "${CYAN}–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∫–æ–º–∞–Ω–¥–æ–π: ./docker.sh start${NC}"
        return
    fi
    
    docker compose exec -T mongodb mongosh -u admin -p password --authenticationDatabase admin --eval "
        const dbs = db.adminCommand('listDatabases').databases;
        dbs.forEach(database => {
            if (!['admin', 'config', 'local'].includes(database.name)) {
                print('–£–¥–∞–ª–µ–Ω–∏–µ –ë–î: ' + database.name);
                db.getSiblingDB(database.name).dropDatabase();
            }
        });
        print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞!');
    "
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!${NC}"
    else
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö${NC}"
    fi
}

if ! command -v docker &> /dev/null; then
    echo -e "${RED}‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker.${NC}"
    exit 1
fi

if [ ! -f .env ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!${NC}"
    echo -e "${CYAN}–°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:${NC}"
    echo -e "  cp .env.example .env"
    exit 1
fi

case "$1" in
    start)
        start_bot
        ;;
    stop)
        stop_bot
        ;;
    restart)
        restart_bot
        ;;
    logs)
        show_logs
        ;;
    logs-bot)
        show_bot_logs
        ;;
    logs-mongo)
        show_mongo_logs
        ;;
    build)
        build_image
        ;;
    status)
        show_status
        ;;
    shell)
        enter_shell
        ;;
    mongo-shell)
        enter_mongo_shell
        ;;
    clean)
        clean_all
        ;;
    clean-db)
        clean_database
        ;;
    help|--help|-h|"")
        show_help
        ;;
    *)
        echo -e "${RED}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac
